openapi: 3.0.0
info:
  title: USER API
  description: USER REST.
  version: '1.0.0'
servers:
  - url: 'http://localhost:8080/'
paths:
  /api/v1/login:
    get:
      summary: login
      operationId: loginGet
      parameters:
        - name: email
          in: query
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: Password  SHA512 (length 128)
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseLogin'
        '400':
          description: Bad request                   
        '403':
          description: Password mismatch
        '404':
          description: Not found
        '500':
          description: Generic error
      tags:
        - admin
  /api/v1/user:
    post:
      summary: register user
      operationId: userPost
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: OK.
        '400':
          description: Bad request          
        '401':
          description: Unauthorized
        '409':
          description: Email already exists
        '500':
          description: Generic error
      tags:
        - user
  /api/v1/userList:
    get:
      summary: get user list
      operationId: userList
      responses:
        '200':
          description: OK.
          content:
            application/json:
              schema:
                 $ref: '#/components/schemas/ResponseUsers'
        '400':
          description: Bad request                    
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Generic error
      tags:
        - user
components:
  schemas:
    ResponseLogin:
      type: object
      properties:
        user:
          type:  '#/components/schemas/User'  
          $ref: '#/components/schemas/User'  
        authToken:
          type: string
    ResponseUsers:
      type: object
      properties:
        users:
          type: array
          items:
              $ref: '#/components/schemas/User'
    User:
      type: object
      properties:
        user_id:
          type: number
        name:
          type: string
          maxLength: 50
        password:
          type: string
          minLength: 128
          maxLength: 128
        email:
          type: string
          maxLength: 255
        age:
          type: number
          minimum: 0
          maximum: 200
      required:
        - name
        - email
        - password
        - age
  securitySchemes:
    Authorization:         
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - Authorization: []